<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Winning.Wordbook</name>
    </assembly>
    <members>
        <member name="T:Winning.Wordbook.BaseWordbook">
            <summary>
            代码字典基类
            </summary>  
        </member>
        <member name="F:Winning.Wordbook.BaseWordbook.m_GridColumns">
            <summary>
            与当前显示方案一致的DataGridViewColumn集合
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.ClearGridColumns">
            <summary>
            清空已创建的GridColumn
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.GenerateConditionFromInParameter(Winning.Wordbook.FilterParameter)">
            <summary>
            分解操作符为In的过滤参数，返回组合好的过滤条件表达式
            </summary>
            <param name="para"></param>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.CreatePersistentWordbook">
            <summary>
            根据当前选中的DataRow生成PersistentWordbook实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.#ctor">
            <summary>
            创建字典类实例
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.#ctor(System.String)">
            <summary>
            在WinningWordbooks.XML中根据指定的字典名搜索定义数据，创建字典实例
            XML文件的数据要符合Wordbook.XSD的定义。下面的处理流程是按XSD的定义进行的。
            </summary>
            <param name="name">字典名称</param>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建字典类对象的同时，初始化允许设置的属性
            </summary>
            <param name="name">要创建的字典的名称</param>param 
            <param name="filters">可以作为代码列的字段名,多个字段时用"\n"隔开，排在前面的优先级高</param>
            <param name="gridStyleIndex">默认选中的Grid显示方案</param>
            <param name="filterComb">输入参数的默认值,多个参数时用"\n"隔开</param>
            <param name="extraCondition">附件的查询条件</param>
            <param name="cacheTime">缓存时间</param>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.ToString">
            <summary>
            获取字典对象的 Expression（如果存在的话）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.GenerateFilterExpression">
            <summary>
            获取当前字典类默认的过滤条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.GenerateGridColumnCollection">
            <summary>
            根据当前显示方案，生成DataGridViewColumn集合
            </summary>
            <returns></returns>      
        </member>
        <member name="M:Winning.Wordbook.BaseWordbook.GenerateDevGridColumnCollection">
            <summary>
            根据当前显示方案，生成DevXtraGridColumn集合
            </summary>
            <returns></returns>      
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.Caption">
            <summary>
            字典名称（显示名称）
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.WordbookName">
            <summary>
            字典名称（上级命名空间+类名，可以作为数据集的名称）
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.CodeField">
            <summary>
            默认代码字段列名。通过代码反查名称时需要
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.CodeFieldIsString">
            <summary>
            默认代码字段列名。通过代码反查名称时需要
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.NameField">
            <summary>
            默认显示字段列名。该列的内容显示在编辑框中。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.QueryCodeField">
            <summary>
            默认查询代码字段列名。有些基础数据需要支持别名，所以在病历中需要用Code来定位记录，用QueryCode作为查询的条件。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.QuerySentence">
            <summary>
            查询数据的语句。
            普通的查询语句，不用像以前一样包含 "py like :py" ，可以包含排序语句。
            如果需要外部传入的参数，则在Where语句中预留参数的位置，形式是"@"+"参数名"，不管参数是何类型，都不要加引号。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.CurrentMatchFields">
            <summary>
            当前使用的选择列字段名集合（根据需要经过了排序）
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.ShowStyles">
            <summary>
            供选择的显示方案集合
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.Parameters">
            <summary>
            过滤参数的集合。可以设置参数时候启用、增加参数、修改参数值
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.MatchFieldComb">
            <summary>
            用来匹配数据的的字段名的组合，多个字段时用"//"隔开，排在前面的优先级高
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.DefaultFilterFields">
            <summary>
            默认的作为代码列的字段名
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.SelectedStyleIndex">
            <summary>
            当前选中的显示方案编号
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.ParameterValueComb">
            <summary>
            过滤参数的默认值组合。以“参数名//值”的形式组合
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.ExtraCondition">
            <summary>
            过滤数据的附加SQL条件
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.CacheTime">
            <summary>
            字典数据在ShowList窗口中的缓存时间，单位秒，0表示无限制。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.PersistentObject">
            <summary>
            根据当前选中的字典记录生成其对应的对象实例.
            如果对象类中有对数据库的操作,要记得给对象的SqlHelper属性赋值
            </summary>
        </member>
        <member name="P:Winning.Wordbook.BaseWordbook.CurrentRow">
            <summary>
            用来初始化当前选中字典记录对象的DataRow
            </summary>
        </member>
        <member name="T:Winning.Wordbook.Topography">
            <summary>
            局部解剖学
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Topography.#ctor">
            <summary>
            创建 局部解剖学 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Topography.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 局部解剖学 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Topography.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.Morphology">
            <summary>
            形态学
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Morphology.#ctor">
            <summary>
            创建 形态学 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Morphology.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 形态学 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Morphology.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.BiologyFunction">
            <summary>
            生物功能
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BiologyFunction.#ctor">
            <summary>
            创建 生物功能 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BiologyFunction.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 生物功能 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BiologyFunction.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.LivingOrganisms">
            <summary>
            活有机体
            </summary>
        </member>
        <member name="M:Winning.Wordbook.LivingOrganisms.#ctor">
            <summary>
            创建 活有机体 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.LivingOrganisms.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 活有机体 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.LivingOrganisms.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.PhysicalAgents">
            <summary>
            物理因素、力和活动
            </summary>
        </member>
        <member name="M:Winning.Wordbook.PhysicalAgents.#ctor">
            <summary>
            创建 物理因素、力和活动 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.PhysicalAgents.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 物理因素、力和活动 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.PhysicalAgents.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.SocialContext">
            <summary>
            社会环境
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SocialContext.#ctor">
            <summary>
            创建 社会环境 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SocialContext.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 社会环境 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SocialContext.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.Procedure">
            <summary>
            操作
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Procedure.#ctor">
            <summary>
            创建 操作 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Procedure.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 操作 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.Procedure.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.GeneralLinkage">
            <summary>
            关联词(修饰词)
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GeneralLinkage.#ctor">
            <summary>
            创建 关联词 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GeneralLinkage.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 关联词 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GeneralLinkage.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.ICD10">
            <summary>
            疾病诊断ICD-10
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ICD10.#ctor">
            <summary>
            创建疾病诊断字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ICD10.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建疾病诊断字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.ICD10.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Diagnose 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.TumourBook">
            <summary>
            肿瘤库
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TumourBook.#ctor">
            <summary>
            创建 肿瘤库 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TumourBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 肿瘤库 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TumourBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DamnificationBook">
            <summary>
            损伤中毒库
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DamnificationBook.#ctor">
            <summary>
            创建 损伤中毒库 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DamnificationBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 损伤中毒库 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DamnificationBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.OperationBook">
            <summary>
            手术诊断
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OperationBook.#ctor">
            <summary>
            创建 手术诊断 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OperationBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 手术诊断 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OperationBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.AnesthesiaBook">
            <summary>
            麻醉字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.AnesthesiaBook.#ctor">
            <summary>
            创建 麻醉字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.AnesthesiaBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 麻醉字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.AnesthesiaBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.ChineseDiagnosisBook">
            <summary>
            中医诊断字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ChineseDiagnosisBook.#ctor">
            <summary>
            创建 麻醉字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ChineseDiagnosisBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 麻醉字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ChineseDiagnosisBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.CommonBook">
            <summary>
            通用字典（字典分类明细）
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CommonBook.#ctor">
            <summary>
            创建通用字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CommonBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建通用字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.CommonBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.SexBook">
            <summary>
            性别
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SexBook.#ctor">
            <summary>
            创建性别字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SexBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建性别字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.SexBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.MetierBook">
            <summary>
            职业
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MetierBook.#ctor">
            <summary>
            创建职业字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MetierBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建职业字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.MetierBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.TechnicalTitleBook">
            <summary>
            职称
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TechnicalTitleBook.#ctor">
            <summary>
            创建职称字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TechnicalTitleBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建职称字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.TechnicalTitleBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.RelationBook">
            <summary>
            联系人关系
            </summary>
        </member>
        <member name="M:Winning.Wordbook.RelationBook.#ctor">
            <summary>
            创建联系人关系字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.RelationBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建联系人关系字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.RelationBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.TreatResultBook">
            <summary>
            治疗结果
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TreatResultBook.#ctor">
            <summary>
            创建治疗结果字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.TreatResultBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建治疗结果字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.TreatResultBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.IncisionLevelBook">
            <summary>
            切口等级
            </summary>
        </member>
        <member name="M:Winning.Wordbook.IncisionLevelBook.#ctor">
            <summary>
            创建切口登记字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.IncisionLevelBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建切口等级字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.IncisionLevelBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.CicatrizationKindBook">
            <summary>
            愈合类别
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CicatrizationKindBook.#ctor">
            <summary>
            创建愈合类别字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CicatrizationKindBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建愈合类别字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.CicatrizationKindBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.IncisionCicatrizationKindBook">
            <summary>
            切口愈合等级(由切口和愈合类别的数据组合得到)
            </summary>
        </member>
        <member name="M:Winning.Wordbook.IncisionCicatrizationKindBook.#ctor">
            <summary>
            创建愈合类别字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.IncisionCicatrizationKindBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建愈合类别字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.IncisionCicatrizationKindBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.MarriageStateBook">
            <summary>
            婚姻状况
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MarriageStateBook.#ctor">
            <summary>
            创建MarriageStateBook字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MarriageStateBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建MarriageStateBook字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.MarriageStateBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.BearStateBook">
            <summary>
            生育状况
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BearStateBook.#ctor">
            <summary>
            创建BearStateBook字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.BearStateBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建BearStateBook字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.BearStateBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建CommonBaseCode类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DepartmentBook">
            <summary>
            院内科室字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DepartmentBook.#ctor">
            <summary>
            创建院内科室字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DepartmentBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建院内科室字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.DepartmentBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Department 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.WardBook">
            <summary>
            病区字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.WardBook.#ctor">
            <summary>
            创建病区字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.WardBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建病区字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.WardBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Ward 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.OpDepartmentBook">
            <summary>
            手术室
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OpDepartmentBook.#ctor">
            <summary>
            创建手术室字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OpDepartmentBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建手术室字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.OpDepartmentBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Department 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.CustomOperationBook">
            <summary>
            院内手术操作字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CustomOperationBook.#ctor">
            <summary>
            创建 院内手术操作 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CustomOperationBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 院内手术操作 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CustomOperationBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 院内手术操作 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.EmployeeBook">
            <summary>
            职工表
            </summary>
        </member>
        <member name="M:Winning.Wordbook.EmployeeBook.#ctor">
            <summary>
            创建职工表字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.EmployeeBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建职工表字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.EmployeeBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Employee 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.ChargeItemBook">
            <summary>
            收费项目
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ChargeItemBook.#ctor">
            <summary>
            创建收费项目字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ChargeItemBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建收费项目字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.ChargeItemBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 OrderItem 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.ClinicItemBook">
            <summary>
            临床收费项目
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ClinicItemBook.#ctor">
            <summary>
            创建临床收费项目字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ClinicItemBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建临床收费项目字典对象
            </summary>
            <param name="filters"></param>
            <param name="gridStyleIndex"></param>
            <param name="filterComb"></param>
            <param name="extraCondition"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Winning.Wordbook.ClinicItemBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 OrderItem 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DruggeryBook">
            <summary>
            药品字典
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryBook.#ctor">
            <summary>
            创建 药品字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 药品字典 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 Druggery 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DruggeryCatalogBook">
            <summary>
            药品分类
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryCatalogBook.#ctor">
            <summary>
            创建 药品分类 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryCatalogBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 药品分类 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryCatalogBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 DruggeryCatalog 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DruggeryFormBook">
            <summary>
            药品剂型
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryFormBook.#ctor">
            <summary>
            创建 药品剂型 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryFormBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 药品剂型 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggeryFormBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 DruggeryForm 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.DruggerySourceBook">
            <summary>
            药品来源
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggerySourceBook.#ctor">
            <summary>
            创建 药品来源 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggerySourceBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 药品来源 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.DruggerySourceBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 DruggerySource 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.OrderUsageBook">
            <summary>
            医嘱用法
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderUsageBook.#ctor">
            <summary>
            创建 医嘱用法 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderUsageBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 医嘱用法 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderUsageBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 OrderUsage 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.OrderFrequencyBook">
            <summary>
            医嘱频次
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderFrequencyBook.#ctor">
            <summary>
            创建 医嘱频次 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderFrequencyBook.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 医嘱频次 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.OrderFrequencyBook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 OrderFrequency 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.MeasureUnit">
            <summary>
            计量单位
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnit.#ctor">
            <summary>
            创建 计量单位 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnit.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 计量单位 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnit.CreatePersistentWordbook">
            <summary>
            用字典实例创建  类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.MeasureUnitCatalog">
            <summary>
            计量单位类别
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnitCatalog.#ctor">
            <summary>
            创建 计量单位类别 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnitCatalog.#ctor(System.String,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            创建 计量单位类别 字典对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.MeasureUnitCatalog.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.FormNormalWordbook">
            <summary>
            BaseWordbook属性的编辑窗口
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.#ctor">
            <summary>
            创建普通字典对象设置窗口
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.InitializeEditBox">
            <summary>
            用当前选中的字典类的信息初始化编辑界面
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.GenerateShowStylePlans">
            <summary>
            根据显示方案动态生成RadioButton和DataGridView的组合
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.ChangeFieldsRowPosition(System.Boolean)">
            <summary>
            交换代码字段树中两个字段的位置
            </summary>
            <param name="isUp">向上</param>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.SaveChanges">
            <summary>
            保存对类做过的修改
            </summary>
        </member>
        <member name="F:Winning.Wordbook.FormNormalWordbook.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Winning.Wordbook.FormNormalWordbook.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FormNormalWordbook.Wordbook">
            <summary>
            当前选择的字典类
            </summary>
        </member>
        <member name="T:Winning.Wordbook.FormSqlWordbook">
            <summary>
            SqlWordbook属性的编辑窗口
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.#ctor">
            <summary>
            创建Sql字典设置窗口
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.InitializeEditBox">
            <summary>
            用当前选中的字典类的信息初始化编辑界面
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.SaveChanges">
            <summary>
            保存对类做过的修改
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.CheckValue">
            <summary>
            检查输入值是否合法
            </summary>
            <returns></returns>
        </member>
        <member name="F:Winning.Wordbook.FormSqlWordbook.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Winning.Wordbook.FormSqlWordbook.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FormSqlWordbook.Wordbook">
            <summary>
            当前选择的字典类
            </summary>
        </member>
        <member name="T:Winning.Wordbook.Resources">
            <summary>
              强类型资源类，用于查找本地化字符串等。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.Culture">
            <summary>
              为使用此强类型资源类的所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.CouldNotFindWordbookDefinitonFile">
            <summary>
              查找类似 未找到字典定义数据，请检查当前目录或Release目录 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.CouldNotSetStringToDigital">
            <summary>
              查找类似 不能将字符串赋值给数值型参数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.CouldNotUseWildcardInRange">
            <summary>
              查找类似 设置参数范围时不能使用通配符 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.CoulNotSetParameterRange">
            <summary>
              查找类似 该参数的值只能是单值，不能是范围形式（因为参数的操作符不是“IN”） 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.NullFieldName">
            <summary>
              查找类似 数据集字段名为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.NullParameter">
            <summary>
              查找类似 参数为NULL，不能赋值给属性 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.NullParameterName">
            <summary>
              查找类似 参数的名称为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.OperatorSignNotDefined">
            <summary>
              查找类似 未定义此操作符 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.ParameterOutOfRange">
            <summary>
              查找类似 未找到指定参数 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.SqlWordbookNeedCodeFieldName">
            <summary>
              查找类似 代码字段必须输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.SqlWordbookNeedName">
            <summary>
              查找类似 字典名称必须输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.SqlWordbookNeedNameFieldName">
            <summary>
              查找类似 名称字段必须输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.SqlWordbookNeedQurySentence">
            <summary>
              查找类似 查询语句必须输入 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.UseLikeOperatprOnDigitalParameter">
            <summary>
              查找类似 对数值型参数使用&apos;Like&apos;运算符 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WordbookFileCouldNotFindDefinition">
            <summary>
              查找类似 未找到字典的定义 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WordbookFileShouldBeFilterField">
            <summary>
              查找类似 基础数据出错，基础属性后应该是过滤字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WordbookFileShouldBeFilterFieldOrStyle">
            <summary>
              查找类似 基础数据出错！缺少过滤字段和显示方案数据 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WordbookFileShouldBeQueryOrStyle">
            <summary>
              查找类似 基础数据出错，过滤字段后面应该是查询参数或显示方案 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WordbookFileWantStyle">
            <summary>
              查找类似 基础数据出错！缺少显示方案数据 的本地化字符串。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Resources.WrongParameterRange">
            <summary>
              查找类似 参数范围设置不正确 的本地化字符串。
            </summary>
        </member>
        <member name="T:Winning.Wordbook.StringType">
            <summary>
            字符串中字符类型枚举
            </summary>
        </member>
        <member name="F:Winning.Wordbook.StringType.Empty">
            <summary>
            空串
            </summary>
        </member>
        <member name="F:Winning.Wordbook.StringType.EnglishChar">
            <summary>
            全部由英文字母
            </summary>
        </member>
        <member name="F:Winning.Wordbook.StringType.Numeric">
            <summary>
            全部由数字组成
            </summary>
        </member>
        <member name="F:Winning.Wordbook.StringType.Char">
            <summary>
            由ASCII中的字母和数组组成
            </summary>
        </member>
        <member name="F:Winning.Wordbook.StringType.Other">
            <summary>
            包含汉字、全角字母或其它符号
            </summary>
        </member>
        <member name="T:Winning.Wordbook.WordbookKind">
            <summary>
            字典的类型
            </summary>
        </member>
        <member name="F:Winning.Wordbook.WordbookKind.Normal">
            <summary>
            普通，预定义的字典类
            </summary>
        </member>
        <member name="F:Winning.Wordbook.WordbookKind.Sql">
            <summary>
            根据SQL语句生成的字典类
            </summary>
        </member>
        <member name="F:Winning.Wordbook.WordbookKind.List">
            <summary>
            根据StringList生成的字典类
            </summary>
        </member>
        <member name="T:Winning.Wordbook.CompareOperator">
            <summary>
            比较运算符名称枚举类
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.Less">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.More">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.NotMore">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.NotLess">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.NotEqual">
            <summary>
            &lt;&gt;
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.Equal">
            <summary>
            =
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.In">
            <summary>
            IN
            </summary>
        </member>
        <member name="F:Winning.Wordbook.CompareOperator.Like">
            <summary>
            LIKE
            </summary>
        </member>
        <member name="T:Winning.Wordbook.FilterParameter">
            <summary>
            过滤参数类定义
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.CheckValue(System.Object)">
            <summary>
            检查传入的参数值是否正确
            </summary>
            <param name="paraValue"></param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.CheckValueType(System.String)">
            <summary>
            检查传入的参数值是否符合参数类型的要求
            （主要是防止将字符型数据赋给数值型参数）
            </summary>
            <param name="paraValue"></param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean,Winning.Wordbook.CompareOperator)">
            <summary>
            创建过滤参数
            </summary>
            <param name="fieldName">参数对应的数据集字段名</param>
            <param name="name">参数的名称</param>
            <param name="isString">标记参数是否是字符型</param>
            <param name="description">参数的描述</param>
            <param name="allowUserEdit">允许普通用户编辑参数值</param>
            <param name="sign">运算符</param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.#ctor(System.String,System.String,System.Boolean,System.String,System.Boolean,Winning.Wordbook.CompareOperator,System.Object)">
            <summary>
            创建过滤参数，并设置初始值
            </summary>
            <param name="fieldName">参数对应的数据集字段名</param>
            <param name="name">参数的名称</param>
            <param name="isString">标记参数是否是字符型</param>
            <param name="description">参数的描述</param>
            <param name="allowUserEdit">允许普通用户编辑参数值</param>
            <param name="sign">运算符</param>
            <param name="value">初始值</param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.#ctor(System.String,System.String,System.Int32,System.String,Winning.Wordbook.CompareOperator)">
            <summary>
            创建取值来源于指定的数据类别的过滤参数。
            此类参数默认为非字符串型，并允许普通用户编辑值
            </summary>
            <param name="fieldName">参数对应的数据集字段名</param>
            <param name="name">参数的名称</param>
            <param name="dataSort">指定的数据类别来源</param>
            <param name="description">参数的描述</param>
            <param name="sign">运算符</param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.#ctor(System.String,System.String,System.Int32,System.String,Winning.Wordbook.CompareOperator,System.Object)">
            <summary>
            创建取值来源于指定的数据类别的过滤参数，并设置初值。
            此类参数默认为非字符串型，并允许普通用户编辑值
            </summary>
            <param name="fieldName">参数对应的数据集字段名</param>
            <param name="name">参数的名称</param>
            <param name="dataSort">指定的数据类别来源</param>
            <param name="description">参数的描述</param>
            <param name="sign">运算符</param>
            <param name="value">初始值</param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.op_Equality(Winning.Wordbook.FilterParameter,Winning.Wordbook.FilterParameter)">
            <summary>
            重载"=="
            </summary>
            <param name="para1"></param>
            <param name="para2"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.op_Inequality(Winning.Wordbook.FilterParameter,Winning.Wordbook.FilterParameter)">
            <summary>
            重载"!="
            </summary>
            <param name="para1"></param>
            <param name="para2"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.Equals(System.Object)">
            <summary>
            确定两个FilterParameter对象是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.GetHashCode">
            <summary>
            返回该实例的哈希代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameter.Clone">
            <summary>
            Clone
            </summary>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.FieldName">
            <summary>
            参数对应的数据集字段名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.Caption">
            <summary>
            参数名称。如果允许用户在运行时设置参数值，名称应取中文名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.IsString">
            <summary>
            标记参数是否是字符型
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.Description">
            <summary>
            对参数的描述
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.DataCatalog">
            <summary>
            此参数的取值来源于指定的数据类别（允许用户设置参数值的时候需要此信息来提供辅助功能）
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.AllowUserEdit">
            <summary>
            允许普通用户编辑参数值
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.Enabled">
            <summary>
            参数是否有效
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.Operator">
            <summary>
            运算符
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.Value">
            <summary>
            参数值。在设置参数值时最好能保证格式和逻辑都正确。
            现支持以范围形式设置条件(如: "id1"或"id1,id2,id3"或"id1,id2～id3,id4%",
            其中使用半角的","和"%"、全角的"～"，"%"只对字符型参数有效)，运算符必须是"In"
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameter.ParameterValue">
            <summary>
            用在条件表达式中的值（如果是字符型的参数，将对参数值加上单引号）
            </summary>
        </member>
        <member name="T:Winning.Wordbook.FilterParameterCollection">
            <summary>
            过滤参数集合类
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(Winning.Wordbook.FilterParameter)">
            <summary>
            向参数列表添加参数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(System.Object)">
            <summary>
            向参数列表添加参数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(System.String,System.String,System.Boolean,System.String,System.Boolean,Winning.Wordbook.CompareOperator)">
            <summary>
            创建新参数,并加入到参数列表中
            </summary>
            <param name="fieldName">对应的数据集字段名</param>
            <param name="name">参数的显示名称</param>
            <param name="isString">是否是字符型</param>
            <param name="description">参数描述信息</param>
            <param name="allowUserEdit">是否允许用户编辑</param>
            <param name="sign">参数运算符</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(System.String,System.String,System.Boolean,System.String,System.Boolean,Winning.Wordbook.CompareOperator,System.Object)">
            <summary>
            创建新参数,并加入到参数列表中
            </summary>
            <param name="fieldName">对应的数据集字段名</param>
            <param name="name">参数的显示名称</param>
            <param name="isString">是否是字符型</param>
            <param name="description">参数描述信息</param>
            <param name="allowUserEdit">是否允许用户编辑</param>
            <param name="sign">参数运算符</param>
            <param name="value">参数默认值</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(System.String,System.String,System.Int32,System.String,Winning.Wordbook.CompareOperator)">
            <summary>
            创建数值型参数,并加入到参数列表
            </summary>
            <param name="fieldName">对应的数据集字段名</param>
            <param name="name">参数的显示名称</param>
            <param name="dataSort">参数所属的数据类别</param>
            <param name="description">参数描述信息</param>
            <param name="sign"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Add(System.String,System.String,System.Int32,System.String,Winning.Wordbook.CompareOperator,System.Object)">
            <summary>
            创建数值型参数,并加入到参数列表
            </summary>
            <param name="fieldName">对应的数据集字段名</param>
            <param name="name">参数的显示名称</param>
            <param name="dataSort">参数所属的数据类别</param>
            <param name="description">参数描述信息</param>
            <param name="sign">参数运算符</param>
            <param name="value">参数默认值</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.AddRange(Winning.Wordbook.FilterParameter[])">
            <summary>
            批量添加参数
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.AddRange(System.Array)">
            <summary>
            批量添加参数
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Clear">
            <summary>
            清空参数列表
            </summary>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Contains(Winning.Wordbook.FilterParameter)">
            <summary>
            检查参数列表是否包含指定的参数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Contains(System.Object)">
            <summary>
            检查参数列表是否包含指定的参数
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.CopyTo(Winning.Wordbook.FilterParameter[],System.Int32)">
            <summary>
            从指定索引开始向过滤参数数组中复制对象
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.GetEnumerator">
            <summary>
            返回IEnumerator实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.IndexOf(Winning.Wordbook.FilterParameter)">
            <summary>
            查找指定参数对象在List中的位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.IndexOf(System.Object)">
            <summary>
            查找指定参数对象在List中的位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.IndexOf(System.String)">
            <summary>
            查找与指定名称匹配的参数在List中的位置
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.Convert2DataTable">
            <summary>
            将参数List转换为DataTable对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.FilterParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            未实现
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.Count">
            <summary>
            参数数量
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.IsFixedSize">
            <summary>
            指示 IList 是否具有固定大小。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.IsSynchronized">
            <summary>
            对 ICollection 的访问是否同步（线程安全）。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.Item(System.Int32)">
            <summary>
            通过参数索引号查找参数
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.Item(System.String)">
            <summary>
            通过参数名查找参数
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.FilterParameterCollection.SyncRoot">
            <summary>
            可用于同步对 ICollection 的访问的对象
            </summary>
        </member>
        <member name="T:Winning.Wordbook.ListWordbook">
            <summary>
            StringList代码字典类。可以利用StringList动态创建字典，以便用ShowList组件代替ComboBox
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ListWordbook.#ctor(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            用指定的字符串集合创建List型字典类实例
            </summary>
            <param name="uniqueName">局部唯一的名称</param>
            <param name="valueList">用来创建类的字符串集合</param>
        </member>
        <member name="M:Winning.Wordbook.ListWordbook.ClearValueFields">
            <summary>
            清除属性字段的值
            </summary>
        </member>
        <member name="M:Winning.Wordbook.ListWordbook.InitValueFields(System.Data.DataRow)">
            <summary>
            用选中的记录初始化属性字段
            </summary>
            <param name="sourceRow"></param>
        </member>
        <member name="M:Winning.Wordbook.ListWordbook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.ListWordbook.Items">
            <summary>
            作为数据源的StringList
            </summary>
        </member>
        <member name="P:Winning.Wordbook.ListWordbook.SerialNo">
            <summary>
            序列号
            </summary>
        </member>
        <member name="P:Winning.Wordbook.ListWordbook.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.ListWordbook.PingYin">
            <summary>
            拼音
            </summary>
        </member>
        <member name="P:Winning.Wordbook.ListWordbook.FiveStrokes">
            <summary>
            五笔
            </summary>
        </member>
        <member name="T:Winning.Wordbook.NormalWordbookConverter">
            <summary>
            处理String与字典类之间的互换。在PropertyGrid中设置BaseWordbook类型的属性时需要
            </summary>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回此转换器是否可将该对象转换为指定的类型
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回该转换器是否可以将一种类型的对象转换为此转换器的类型
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            将给定值转换为此转换器的类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            将给定值对象转换为指定的类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            在给定 Object 的一组属性值的情况下重新创建该对象
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            返回更改此对象的值是否需要调用 CreateInstance 来创建新值。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.NormalWordbookEditor">
            <summary>
            编辑Wordbook属性的编辑器
            </summary>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookEditor.#ctor">
            <summary>
            创建普通字典的编辑器
            </summary>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取由 EditValue 方法使用的编辑器样式。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.NormalWordbookEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            使用 GetEditStyle 指示的编辑器样式编辑指定的对象值。
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.GridColumnStyle">
            <summary>
            Grid中Column的配置信息(包含要ColumnName、显示名称、宽度等)
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyle.#ctor">
            <summary>
            创建Grid中列显示样式对象
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyle.#ctor(System.String,System.String,System.Int32)">
            <summary>
            创建Grid中列显示样式对象
            </summary>
            <param name="column"></param>
            <param name="title"></param>
            <param name="colWidth"></param>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyle.FieldName">
            <summary>
            Grid中Column的ColumnName
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyle.Caption">
            <summary>
            Grid中Column的显示名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyle.Width">
            <summary>
            Grid中Column的初始宽度
            </summary>
        </member>
        <member name="T:Winning.Wordbook.GridColumnStyleCollection">
            <summary>
            Grid列显示方案集合类
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Add(Winning.Wordbook.GridColumnStyle)">
            <summary>
            向列表添加显示样式对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Add(System.Object)">
            <summary>
            向列表添加显示样式对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Add(System.String,System.String,System.Int32)">
            <summary>
            创建新显示样式对象,并加入到列表
            </summary>
            <param name="fieldName"></param>
            <param name="caption"></param>
            <param name="width"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.AddRange(Winning.Wordbook.GridColumnStyle[])">
            <summary>
            批量添加对象
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.AddRange(System.Array)">
            <summary>
            批量添加对象
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Clear">
            <summary>
            清空列表
            </summary>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Contains(Winning.Wordbook.GridColumnStyle)">
            <summary>
            列表是否包含指定的对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.Contains(System.Object)">
            <summary>
            列表是否包含指定的对象
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.CopyTo(Winning.Wordbook.GridColumnStyle[],System.Int32)">
            <summary>
            从指定索引开始向列显示样式数组赋值数据
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.IndexOf(Winning.Wordbook.GridColumnStyle)">
            <summary>
            查找与指定对象匹配的列显示样式对象在列表中的位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.IndexOf(System.Object)">
            <summary>
            查找与指定对象匹配的列显示样式对象在列表中的位置
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.IndexOf(System.String)">
            <summary>
            查找指定名称的字段对应的显示样式对象在列表中的位置
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.ToString">
            <summary>
            获取对象的 Expression（如果存在的话）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            未实现
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Winning.Wordbook.GridColumnStyleCollection.GetEnumerator">
            <summary>
            返回IEnumerator实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.Count">
            <summary>
            包含的列显示样式数量
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.IsFixedSize">
            <summary>
            列表尺寸是否固定
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.IsReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.IsSynchronized">
            <summary>
            对 ICollection 的访问是否同步（线程安全）。
            </summary>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.Item(System.Int32)">
            <summary>
            通过索引号查找列的显示样式对象
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.Item(System.String)">
            <summary>
            通过名称查找列的显示样式对象
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.GridColumnStyleCollection.SyncRoot">
            <summary>
            可用于同步对 ICollection 的访问的对象
            </summary>
        </member>
        <member name="T:Winning.Wordbook.SeparatorSign">
            <summary>
            字符串处理类
            </summary>
        </member>
        <member name="F:Winning.Wordbook.SeparatorSign.ListSeparator">
            <summary>
            组合字符串时使用的分隔符号
            </summary>
        </member>
        <member name="F:Winning.Wordbook.SeparatorSign.OtherSeparator">
            <summary>
            组合字符串时使用的分隔符号(另一种)
            </summary>
        </member>
        <member name="T:Winning.Wordbook.SqlWordbookConverter">
            <summary>
            处理String与SQL字典类之间的互换。在PropertyGrid中设置SqlWordbook类型的属性时需要
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回此转换器是否可将该对象转换为指定的类型
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            返回该转换器是否可以将一种类型的对象转换为此转换器的类型
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            将给定值转换为此转换器的类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            将给定值对象转换为指定的类型
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            在给定 Object 的一组属性值的情况下重新创建该对象
            </summary>
            <param name="context"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            返回更改此对象的值是否需要调用 CreateInstance 来创建新值。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.SqlWordbookEditor">
            <summary>
            SqlWordbook属性的编辑器
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookEditor.#ctor">
            <summary>
            创建Sql字典编辑器
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            获取由 EditValue 方法使用的编辑器样式。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbookEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            使用 GetEditStyle 指示的编辑器样式编辑指定的对象值。
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Winning.Wordbook.SqlWordbook">
            <summary>
            通过SQL语句或已有数据集动态创建字典，以满足特殊场合的使用
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.String,System.String,System.String,Winning.Wordbook.GridColumnStyleCollection)">
            <summary>
            用指定的SQL语句等信息创建SQL字典类实例。
            字段的显示名称、显示哪些列、列宽等信息在columnStyles中指定
            </summary>
            <param name="uniqueName">局部唯一的名称</param>
            <param name="query">查询语句</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnStyles">字段的显示名称、显示哪些列、列宽等信息</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.String,System.String,System.String,Winning.Wordbook.GridColumnStyleCollection,System.String)">
            <summary>
            用指定的SQL语句等信息创建SQL字典类实例。
            字段的显示名称、显示哪些列、列宽等信息在columnStyles中指定
            </summary>
            <param name="uniqueName">局部唯一的名称</param>
            <param name="query">查询语句</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnStyles">字段的显示名称、显示哪些列、列宽等信息</param>
            <param name="matchFieldComb">指定用来匹配输入数据的字段名，多个时用“//”格开,可以传入空</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.String,System.String,System.String,Winning.Wordbook.GridColumnStyleCollection,System.Boolean)">
            <summary>
            用指定的SQL语句等信息创建SQL字典类实例。
            字段的显示名称、显示哪些列、列宽等信息在columnStyles中指定
            </summary>
            <param name="uniqueName">局部唯一的名称</param>
            <param name="query">查询语句</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnStyles">字段的显示名称、显示哪些列、列宽等信息</param>
            <param name="autoAddShortCode">自动添加拼音、五笔列</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            用指定的SQL语句等信息创建SQL字典类实例。
            字段的显示名称、显示哪些列、列宽等信息在columnStylesString中指定
            </summary>
            <param name="uniqueName">局部唯一的名称</param>
            <param name="query">查询语句</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnStylesComb">字段的显示名称、显示哪些列、列宽等信息，以“//”和“///”分隔</param>
            <param name="matchFieldComb">指定用来匹配输入数据的字段名，多个时用“//”格开,可以传入空</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.Data.DataTable,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            用指定的DataTable等信息创建SQL字典类实例。
            列的显示名用DataColumn的Caption代替，需要显示的列及其列宽通过columnWidthes设置
            </summary>
            <param name="uniqueName">局部唯一的字典名</param>
            <param name="sourceData">数据集</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnWidthes">需要显示的列名及其列宽</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.Data.DataTable,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Boolean)">
            <summary>
            用指定的DataTable等信息创建SQL字典类实例。
            列的显示名用DataColumn的Caption代替，需要显示的列及其列宽通过columnWidthes设置
            </summary>
            <param name="uniqueName">局部唯一的字典名</param>
            <param name="sourceData">数据集</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnWidthes">需要显示的列名及其列宽</param>
            <param name="autoAddShortCode">自动添加拼音、五笔列</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.#ctor(System.String,System.Data.DataTable,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.String)">
            <summary>
            用指定的DataTable等信息创建SQL字典类实例。
            列的显示名用DataColumn的Caption代替，需要显示的列及其列宽通过columnWidthes设置
            </summary>
            <param name="uniqueName">局部唯一的字典名</param>
            <param name="sourceData">数据集</param>
            <param name="codeField">代码字段名</param>
            <param name="nameField">名称字段名</param>
            <param name="columnWidthes">需要显示的列名及其列宽</param>
            <param name="matchFieldComb">指定用来匹配输入数据的字段名，多个时用“//”格开,可以传入空</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.EnsureBookData(Winning.Framework.IDataAccess,Winning.Framework.GenerateShortCode)">
            <summary>
            确认数据集（在这里统一处理SQL和Table两种类型的数据源，根据设置添加拼音五笔字段）
            </summary>
            <param name="sqlHelper">执行SQL时需要</param>
            <param name="shortCodeHelper">自动生成拼音五笔代码时需要</param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.ToString">
            <summary>
            获取对象的 Expression（如果存在的话）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.ClearValueFields">
            <summary>
            清除属性的值
            </summary>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.InitValueFields(System.Data.DataRow)">
            <summary>
            用选中的记录初始化属性值
            </summary>
            <param name="sourceRow"></param>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.CreatePersistentWordbook">
            <summary>
            用字典实例创建 类型持久对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.SqlWordbook.CreateColumnStyleCollectionByString(System.String)">
            <summary>
            将传入的字符串转换为GridColumnStyleCollection对象
            </summary>
            <param name="stylesComb">列样式字符串组合</param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.SqlWordbook.CodeValue">
            <summary>
            代码值
            </summary>
        </member>
        <member name="P:Winning.Wordbook.SqlWordbook.NameValue">
            <summary>
            名称值
            </summary>
        </member>
        <member name="P:Winning.Wordbook.SqlWordbook.UseSqlStatement">
            <summary>
            是否需要使用查询语句生成数据集
            </summary>
        </member>
        <member name="P:Winning.Wordbook.SqlWordbook.BookData">
            <summary>
            包含字典数据DataTable。此属性赋值后就不需要用语句去生成数据集
            </summary>
        </member>
        <member name="P:Winning.Wordbook.SqlWordbook.DefaultGridStyle">
            <summary>
            Sql字典默认的显示样式
            </summary>
        </member>
        <member name="T:Winning.Wordbook.CommonOperation">
            <summary>
            提供一些公共的处理方法
            </summary>
        </member>
        <member name="M:Winning.Wordbook.CommonOperation.GetStringType(System.String)">
            <summary>
            得到传入的字符串中字符的类型
            </summary>
            <param name="input">要判断类型的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.CommonOperation.TransferCondition(System.String,Winning.Wordbook.CompareOperator)">
            <summary>
            对传入的条件表达式字符串中的特殊字符进行转义。
            在生成DataView或DataColumn的Expression时需要进行此处理
            </summary>
            <param name="condition">Expression 中的条件表达式</param>
            <param name="operaName">操作符</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.CommonOperation.TransferCondition(System.String,Winning.Wordbook.CompareOperator,System.Boolean)">
            <summary>
            对传入的条件表达式字符串中的特殊字符进行转义。
            在生成DataView或DataColumn的Expression时需要进行此处理
            </summary>
            <param name="condition">Expression 中的条件表达式</param>
            <param name="operaName">操作符</param>
            <param name="handleQuote">是否处理单引号</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.CommonOperation.GetOperatorSign(Winning.Wordbook.CompareOperator)">
            <summary>
            根据操作符枚举变量得到实际的操作符
            </summary>
            <param name="filterOperator">操作符枚举变量</param>
            <returns>实际的操作符</returns>
        </member>
        <member name="M:Winning.Wordbook.CommonOperation.GetWordbookByString(System.String)">
            <summary>
            根据传入的Wordbook关键信息字符串生成字典实例
            </summary>
            <param name="keyInfo">字典的关键信息组成的字符串</param>
            <returns>字典类实例</returns>
        </member>
        <member name="T:Winning.Wordbook.WordbookStaticHandle">
            <summary>
            字典类静态信息和处理字典配置文件的静态方法
            </summary>
        </member>
        <member name="M:Winning.Wordbook.WordbookStaticHandle.GetWordbook(System.String)">
            <summary>
            通过字典名称获取对应的字典类实例
            </summary>
            <param name="name">字典类的类名（全称或分类名+字典名）</param>
            <returns>类名正确，返回相应实例，否则报异常</returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookStaticHandle.GetWordbookByString(System.String)">
            <summary>
            根据传入的Wordbook关键信息字符串生成字典实例
            </summary>
            <param name="keyInfo">字典的关键信息组成的字符串</param>
            <returns>字典类实例</returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookStaticHandle.GetWordbookQuerySentence(System.String)">
            <summary>
            获取指定字典的查询语句定义
            </summary>
            <param name="bookName">指定的字典名称</param>
            <returns>查询语句</returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookStaticHandle.GetSourceWordbookByName(System.String)">
            <summary>
            根据字典名称，找到对应的原始的字典类实例
            </summary>
            <param name="bookName">由分类名和字典名组成的名称</param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.WordbookStaticHandle.WordbookCatalogs">
            <summary>
            代码字典分类(key: 字典分类的标识 value: 字典分类的名称)
            </summary>
        </member>
        <member name="P:Winning.Wordbook.WordbookStaticHandle.WordbookList">
            <summary>
            所有固定的代码字典类信息列表
            </summary>
        </member>
        <member name="T:Winning.Wordbook.WordbookInfo">
            <summary>
            字典信息的结构体
            </summary>
        </member>
        <member name="M:Winning.Wordbook.WordbookInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            用传入的信息创建一个字典信息结构体
            </summary>
            <param name="catalog">所属分类名称</param>
            <param name="name">字典名称</param>
            <param name="typeName">字典类型的名称</param>
        </member>
        <member name="M:Winning.Wordbook.WordbookInfo.Equals(System.Object)">
            <summary>
            确定两个字典信息结构体是否具有相同的值
            </summary>
            <param name="obj">与当前对象比较的结构体</param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookInfo.GetHashCode">
            <summary>
            返回该实例的哈希代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookInfo.op_Equality(Winning.Wordbook.WordbookInfo,Winning.Wordbook.WordbookInfo)">
            <summary>
            重载运算符"=="
            </summary>
            <param name="para1"></param>
            <param name="para2"></param>
            <returns></returns>
        </member>
        <member name="M:Winning.Wordbook.WordbookInfo.op_Inequality(Winning.Wordbook.WordbookInfo,Winning.Wordbook.WordbookInfo)">
            <summary>
            重载运算符"!="
            </summary>
            <param name="para1"></param>
            <param name="para2"></param>
            <returns></returns>
        </member>
        <member name="P:Winning.Wordbook.WordbookInfo.Catalog">
            <summary>
            所属分类名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.WordbookInfo.Name">
            <summary>
            字典名称（显示名称）
            </summary>
        </member>
        <member name="P:Winning.Wordbook.WordbookInfo.TypeName">
            <summary>
            对应字典类型的名称
            </summary>
        </member>
        <member name="T:Winning.Wordbook.UCtrlWordbookTree">
            <summary>
            显示预定义字典类的UserControl
            </summary>
        </member>
        <member name="M:Winning.Wordbook.UCtrlWordbookTree.#ctor">
            <summary>
            创建字典类选择树控件
            </summary>
        </member>
        <member name="M:Winning.Wordbook.UCtrlWordbookTree.ShowCurrentSortDictionaries(System.String)">
            <summary>
            显示当前字典类别所属的字典
            </summary>
        </member>
        <member name="F:Winning.Wordbook.UCtrlWordbookTree.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Winning.Wordbook.UCtrlWordbookTree.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Winning.Wordbook.UCtrlWordbookTree.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Winning.Wordbook.UCtrlWordbookTree.CurrentBookInfo">
            <summary>
            当前选中的字典的类信息
            </summary>
        </member>
        <member name="E:Winning.Wordbook.UCtrlWordbookTree.TreeDoubleClick">
            <summary>
            字典树双击事件
            </summary>
        </member>
        <member name="T:Winning.Wordbook.Schema.Wordbook">
            <summary>
            字典类定义(序列化用，需要手工转换到BaseWordbook)
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.QuerySentence">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.CodeField">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.NameField">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.QueryCodeField">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.CodeFieldIsString">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.FilterFieldCollection">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.ParameterCollection">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.ViewStyleCollection">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.WordbookName">
            <remarks/>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbook.Caption">
            <remarks/>
        </member>
        <member name="T:Winning.Wordbook.Schema.WordbookCatalog">
            <summary>
            字典类分组
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Schema.WordbookCatalog.Wordbooks">
            <summary>
            字典类数组
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Schema.WordbookCatalog.CatalogName">
            <summary>
            分类名称
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Schema.WordbookCatalog.Caption">
            <summary>
            分类显示名称
            </summary>
        </member>
        <member name="T:Winning.Wordbook.Schema.Wordbooks">
            <summary>
            包含所有的字典类定义
            </summary>
        </member>
        <member name="P:Winning.Wordbook.Schema.Wordbooks.Catalogs">
            <summary>
            字典类分类数组
            </summary>
        </member>
    </members>
</doc>
